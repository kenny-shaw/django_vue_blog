"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 2.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os
# 引入json，用来读取敏感信息
import json
with open('env.json') as env:
    ENV = json.load(env)
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = ENV['SECRET_KEY']

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# 部署
# DEBUG = False

ALLOWED_HOSTS = []
# 部署
# ALLOWED_HOSTS = ['.kennyeow.com', '127.0.0.1']
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'haystack',
    'api',
    'rest_framework',
    'mptt',
    'corsheaders',
    'sortedm2m'
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 自定义跨域处理
    # 'api.utils.mycors.CORSMiddleware',

]
CORS_ORIGIN_ALLOW_ALL = True

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}
# MYSQL
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.mysql',
#         'NAME': 'kennyeow_db',
#         'USER': 'root',
#         'PASSWORD': ENV['MYSQL_PASSWORD'],
#         'HOST': 'db',
#         'PORT': '3306',
#         'OPTIONS': {'charset': 'utf8mb4'},
#     }
# }

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
#部署 静态文件收集目录
# STATIC_ROOT = os.path.join(BASE_DIR, 'collected_static')

# rest_framework配置
REST_FRAMEWORK = {

    # 版本设置
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.URLPathVersioning",
    "ALLOWED_VERSIONS": ['v1', 'v2'],
    "DEFAULT_VERSION": 'v1',
    "VERSION_PARAM": 'version',

    # 解析器设置，对请求题数据进行解析
    "DEFAULT_PARSER_CLASSES": ['rest_framework.parsers.JSONParser',
                               'rest_framework.parsers.FormParser',
                               'rest_framework.parsers.MultiPartParser'
                               ],

    # 用户登录认证，设定全局使用的认证类，并设定未登录用户与其token为none
    # "DEFAULT_AUTHENTICATION_CLASSES": ['api.utils.auth.KennyAuthentication'],
    # "UNAUTHENTICATED_USER":lambda :"匿名用户"
    "UNAUTHENTICATED_USER": None,  # 匿名，request.user = None
    "UNAUTHENTICATED_TOKEN": None,  # 匿名，request.auth = None

    # 权限
    # "DEFAULT_PERMISSION_CLASSES": ['api.utils.permission.AdminPermission']

}

# 邮箱设置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_SSL = True        # SSL加密方式
EMAIL_HOST = 'smtp.qq.com'   # 发送邮件的邮箱 的 SMTP服务器
EMAIL_PORT = 465    # SMTP服务器端口
EMAIL_HOST_USER = ENV['EMAIL_HOST_USER']   # 发件人
EMAIL_HOST_PASSWORD = ENV['EMAIL_HOST_PASSWORD']   # 密码(这里使用的是授权码)
EMAIL_FROM = 'kennyshaw<kennyshaw@foxmail.com>'   # 邮件显示的发件人

# Haystack配置
HAYSTACK_CONNECTIONS={
    'default':{
        # 指定使用 elasticsearch 为搜索引擎
        # 搜索内容包含中文, 需要将 elasticsearch 配置为支持中文分词ik的Elasticsearch2IkSearchEngine
         'ENGINE':'api.utils.myelasticsearch2ikbackend.Elasticsearch2IkSearchEngine',
        # 'ENGINE': 'haystack.backends.elasticsearch_backend.ElasticsearchSearchEngine',
        # 此处为elasticsearch运行的服务器ip地址，端口号默认为9200
        'URL': 'http://127.0.0.1:9200/',
        # 部署
        # 'URL': 'http://101.132.74.181:9200/',

        # elasticsearch建立的索引库的名称
        'INDEX_NAME': 'kenny_index',
        # 保存索引文件的路径
        # 'PATH': os.path.join(BASE_DIR, 'elastic_index'), # 如果搜索引擎是whoosh, 还需要设置PATH参数
    }
}
# 当添加、修改、删除数据时，自动生成索引（后期服务器定期运行此任务）
HAYSTACK_SIGNAL_PROCESSOR = 'haystack.signals.RealtimeSignalProcessor'
# 指定搜索结果每页的条数 这里设置成了1条(这里使用自定义的分页，不使用该分页）
# HAYSTACK_SEARCH_RESULTS_PER_PAGE = 1
